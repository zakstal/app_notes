---What is Node.js?---

Node.js is a command line tool that can be used to set up a web server and run JavaScript programs.

Node.js is built on top of the V8 javascript engine, which comes from Google Chrome. This is awesome because it makes things really fast.

Basic Example

Design Pattern for creating a server:

var http = require('http');

var server = http.createServer(function (request, response) {
  // callback functionality here...
  response.end();
});

var port = 8080;
server.listen(port);

console.log("Listening on http://localhost:"+port);


It uses non-blocking I/O
and a single-threaded event loop
so that it can be event-driven

Input and Output operations include any interaction between the Node.js

---Web Sockets and Socket.IO---

To initialize the connection, the client sends a "WebSocket handshake request", and the server sends a "Websocket handshake response", which look like this:

GET /mychat HTTP/1.1
Host: server.example.com
Upgrade: websocket
Connection: Upgrade
Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==
Sec-WebSocket-Protocol: chat
Sec-WebSocket-Version: 13
Origin: http://example.com
Server response:

HTTP/1.1 101 Switching Protocols
Upgrade: websocket
Connection: Upgrade
Sec-WebSocket-Accept: HSmrc0sMlYUkAGmm5OPpG2HaGWk=
Sec-WebSocket-Protocol: chat

Socket.IO Syntax

Creating a socket.io server with node.js:

NB: You may have to run npm install socket.io before running this code.

// in socketio-server.js

var socketio = require("socket.io");

var listen = function(server){
  var io = socket.io.listen(server);
  io.sockets.on('connection', function(socket){
    console.log('A socket is connected!');
    // listen for messages sent by the client
    socket.on('event_here', function(data){
      //code to respond to given event and data...
    });
    // send an event to just the newly connected client
    socket.emit('hello', "hello new socket");
    // send an event to all the connected clients
    io.sockets.emit('hello', "hello everyone");
    // log the disconnection of this client
    socket.on('disconnect', function(){
      console.log("A socket disconnected.");
    })
  });
}

exports.listen = listen;
